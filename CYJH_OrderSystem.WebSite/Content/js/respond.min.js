/*! matchMedia() polyfill - Test a CSS media type/query in JS. Authors & copyright (c) 2012: Scott Jehl, Paul Irish, Nicholas Zakas. Dual MIT/BSD license */
/*! NOTE: If you're already including a window.matchMedia polyfill via Modernizr or otherwise, you don't need this part */
//window.matchMedia=window.matchMedia||function(a){"use strict";var c,d=a.documentElement,e=d.firstElementChild||d.firstChild,f=a.createElement("body"),g=a.createElement("div");return g.id="mq-test-1",g.style.cssText="position:absolute;top:-100em",f.style.background="none",f.appendChild(g),function(a){return g.innerHTML='&shy;<style media="'+a+'"> #mq-test-1 { width: 42px; }</style>',d.insertBefore(f,e),c=42===g.offsetWidth,d.removeChild(f),{matches:c,media:a}}}(document);

/*! Respond.js v1.3.0: min/max-width media query polyfill. (c) Scott Jehl. MIT/GPLv2 Lic. j.mp/respondjs  */
//(function(a){"use strict";function x(){u(!0)}var b={};if(a.respond=b,b.update=function(){},b.mediaQueriesSupported=a.matchMedia&&a.matchMedia("only all").matches,!b.mediaQueriesSupported){var q,r,t,c=a.document,d=c.documentElement,e=[],f=[],g=[],h={},i=30,j=c.getElementsByTagName("head")[0]||d,k=c.getElementsByTagName("base")[0],l=j.getElementsByTagName("link"),m=[],n=function(){for(var b=0;l.length>b;b++){var c=l[b],d=c.href,e=c.media,f=c.rel&&"stylesheet"===c.rel.toLowerCase();d&&f&&!h[d]&&(c.styleSheet&&c.styleSheet.rawCssText?(p(c.styleSheet.rawCssText,d,e),h[d]=!0):(!/^([a-zA-Z:]*\/\/)/.test(d)&&!k||d.replace(RegExp.$1,"").split("/")[0]===a.location.host)&&m.push({href:d,media:e}))}o()},o=function(){if(m.length){var b=m.shift();v(b.href,function(c){p(c,b.href,b.media),h[b.href]=!0,a.setTimeout(function(){o()},0)})}},p=function(a,b,c){var d=a.match(/@media[^\{]+\{([^\{\}]*\{[^\}\{]*\})+/gi),g=d&&d.length||0;b=b.substring(0,b.lastIndexOf("/"));var h=function(a){return a.replace(/(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,"$1"+b+"$2$3")},i=!g&&c;b.length&&(b+="/"),i&&(g=1);for(var j=0;g>j;j++){var k,l,m,n;i?(k=c,f.push(h(a))):(k=d[j].match(/@media *([^\{]+)\{([\S\s]+?)$/)&&RegExp.$1,f.push(RegExp.$2&&h(RegExp.$2))),m=k.split(","),n=m.length;for(var o=0;n>o;o++)l=m[o],e.push({media:l.split("(")[0].match(/(only\s+)?([a-zA-Z]+)\s?/)&&RegExp.$2||"all",rules:f.length-1,hasquery:l.indexOf("(")>-1,minw:l.match(/\(\s*min\-width\s*:\s*(\s*[0-9\.]+)(px|em)\s*\)/)&&parseFloat(RegExp.$1)+(RegExp.$2||""),maxw:l.match(/\(\s*max\-width\s*:\s*(\s*[0-9\.]+)(px|em)\s*\)/)&&parseFloat(RegExp.$1)+(RegExp.$2||"")})}u()},s=function(){var a,b=c.createElement("div"),e=c.body,f=!1;return b.style.cssText="position:absolute;font-size:1em;width:1em",e||(e=f=c.createElement("body"),e.style.background="none"),e.appendChild(b),d.insertBefore(e,d.firstChild),a=b.offsetWidth,f?d.removeChild(e):e.removeChild(b),a=t=parseFloat(a)},u=function(b){var h="clientWidth",k=d[h],m="CSS1Compat"===c.compatMode&&k||c.body[h]||k,n={},o=l[l.length-1],p=(new Date).getTime();if(b&&q&&i>p-q)return a.clearTimeout(r),r=a.setTimeout(u,i),void 0;q=p;for(var v in e)if(e.hasOwnProperty(v)){var w=e[v],x=w.minw,y=w.maxw,z=null===x,A=null===y,B="em";x&&(x=parseFloat(x)*(x.indexOf(B)>-1?t||s():1)),y&&(y=parseFloat(y)*(y.indexOf(B)>-1?t||s():1)),w.hasquery&&(z&&A||!(z||m>=x)||!(A||y>=m))||(n[w.media]||(n[w.media]=[]),n[w.media].push(f[w.rules]))}for(var C in g)g.hasOwnProperty(C)&&g[C]&&g[C].parentNode===j&&j.removeChild(g[C]);for(var D in n)if(n.hasOwnProperty(D)){var E=c.createElement("style"),F=n[D].join("\n");E.type="text/css",E.media=D,j.insertBefore(E,o.nextSibling),E.styleSheet?E.styleSheet.cssText=F:E.appendChild(c.createTextNode(F)),g.push(E)}},v=function(a,b){var c=w();c&&(c.open("GET",a,!0),c.onreadystatechange=function(){4!==c.readyState||200!==c.status&&304!==c.status||b(c.responseText)},4!==c.readyState&&c.send(null))},w=function(){var b=!1;try{b=new a.XMLHttpRequest}catch(c){b=new a.ActiveXObject("Microsoft.XMLHTTP")}return function(){return b}}();n(),b.update=n,a.addEventListener?a.addEventListener("resize",x,!1):a.attachEvent&&a.attachEvent("onresize",x)}})(this);

/*! Respond.js v1.4.0: min/max-width media query polyfill. (c) Scott Jehl. MIT Lic. j.mp/respondjs  */
(function (w) {

    "use strict";

    //exposed namespace
    var respond = {};
    w.respond = respond;

    //define update even in native-mq-supporting browsers, to avoid errors
    respond.update = function () { };

    //define ajax obj
    var requestQueue = [],
            xmlHttp = (function () {
                var xmlhttpmethod = false;
                try {
                    xmlhttpmethod = new w.XMLHttpRequest();
                }
                catch (e) {
                    xmlhttpmethod = new w.ActiveXObject("Microsoft.XMLHTTP");
                }
                return function () {
                    return xmlhttpmethod;
                };
            })(),

            //tweaked Ajax functions from Quirksmode
            ajax = function (url, callback) {
                var req = xmlHttp();
                if (!req) {
                    return;
                }
                req.open("GET", url, true);
                req.onreadystatechange = function () {
                    if (req.readyState !== 4 || req.status !== 200 && req.status !== 304) {
                        return;
                    }
                    callback(req.responseText);
                };
                if (req.readyState === 4) {
                    return;
                }
                req.send(null);
            };

    //expose for testing
    respond.ajax = ajax;
    respond.queue = requestQueue;

    // expose for testing
    respond.regex = {
        media: /@media[^\{]+\{([^\{\}]*\{[^\}\{]*\})+/gi,
        keyframes: /@(?:\-(?:o|moz|webkit)\-)?keyframes[^\{]+\{(?:[^\{\}]*\{[^\}\{]*\})+[^\}]*\}/gi,
        urls: /(url\()['"]?([^\/\)'"][^:\)'"]+)['"]?(\))/g,
        findStyles: /@media *([^\{]+)\{([\S\s]+?)$/,
        only: /(only\s+)?([a-zA-Z]+)\s?/,
        minw: /\([\s]*min\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/,
        maxw: /\([\s]*max\-width\s*:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/
    };

    //expose media query support flag for external use
    respond.mediaQueriesSupported = w.matchMedia && w.matchMedia("only all") !== null && w.matchMedia("only all").matches;

    //if media queries are supported, exit here
    if (respond.mediaQueriesSupported) {
        return;
    }

    //define vars
    var doc = w.document,
            docElem = doc.documentElement,
            mediastyles = [],
            rules = [],
            appendedEls = [],
            parsedSheets = {},
            resizeThrottle = 30,
            head = doc.getElementsByTagName("head")[0] || docElem,
            base = doc.getElementsByTagName("base")[0],
            links = head.getElementsByTagName("link"),

            lastCall,
            resizeDefer,

            //cached container for 1em value, populated the first time it's needed
            eminpx,

            // returns the value of 1em in pixels
            getEmValue = function () {
                var ret,
                        div = doc.createElement('div'),
                        body = doc.body,
                        originalHTMLFontSize = docElem.style.fontSize,
                        originalBodyFontSize = body && body.style.fontSize,
                        fakeUsed = false;

                div.style.cssText = "position:absolute;font-size:1em;width:1em";

                if (!body) {
                    body = fakeUsed = doc.createElement("body");
                    body.style.background = "none";
                }

                // 1em in a media query is the value of the default font size of the browser
                // reset docElem and body to ensure the correct value is returned
                docElem.style.fontSize = "100%";
                body.style.fontSize = "100%";

                body.appendChild(div);

                if (fakeUsed) {
                    docElem.insertBefore(body, docElem.firstChild);
                }

                ret = div.offsetWidth;

                if (fakeUsed) {
                    docElem.removeChild(body);
                }
                else {
                    body.removeChild(div);
                }

                // restore the original values
                docElem.style.fontSize = originalHTMLFontSize;
                if (originalBodyFontSize) {
                    body.style.fontSize = originalBodyFontSize;
                }


                //also update eminpx before returning
                ret = eminpx = parseFloat(ret);

                return ret;
            },

            //enable/disable styles
            applyMedia = function (fromResize) {
                var name = "clientWidth",
                        docElemProp = docElem[name],
                        currWidth = doc.compatMode === "CSS1Compat" && docElemProp || doc.body[name] || docElemProp,
                        styleBlocks = {},
                        lastLink = links[links.length - 1],
                        now = (new Date()).getTime();

                //throttle resize calls
                if (fromResize && lastCall && now - lastCall < resizeThrottle) {
                    w.clearTimeout(resizeDefer);
                    resizeDefer = w.setTimeout(applyMedia, resizeThrottle);
                    return;
                }
                else {
                    lastCall = now;
                }

                for (var i in mediastyles) {
                    if (mediastyles.hasOwnProperty(i)) {
                        var thisstyle = mediastyles[i],
                                min = thisstyle.minw,
                                max = thisstyle.maxw,
                                minnull = min === null,
                                maxnull = max === null,
                                em = "em";

                        if (!!min) {
                            min = parseFloat(min) * (min.indexOf(em) > -1 ? (eminpx || getEmValue()) : 1);
                        }
                        if (!!max) {
                            max = parseFloat(max) * (max.indexOf(em) > -1 ? (eminpx || getEmValue()) : 1);
                        }

                        // if there's no media query at all (the () part), or min or max is not null, and if either is present, they're true
                        if (!thisstyle.hasquery || (!minnull || !maxnull) && (minnull || currWidth >= min) && (maxnull || currWidth <= max)) {
                            if (!styleBlocks[thisstyle.media]) {
                                styleBlocks[thisstyle.media] = [];
                            }
                            styleBlocks[thisstyle.media].push(rules[thisstyle.rules]);
                        }
                    }
                }

                //remove any existing respond style element(s)
                for (var j in appendedEls) {
                    if (appendedEls.hasOwnProperty(j)) {
                        if (appendedEls[j] && appendedEls[j].parentNode === head) {
                            head.removeChild(appendedEls[j]);
                        }
                    }
                }
                appendedEls.length = 0;

                //inject active styles, grouped by media type
                for (var k in styleBlocks) {
                    if (styleBlocks.hasOwnProperty(k)) {
                        var ss = doc.createElement("style"),
                                css = styleBlocks[k].join("\n");

                        ss.type = "text/css";
                        ss.media = k;

                        //originally, ss was appended to a documentFragment and sheets were appended in bulk.
                        //this caused crashes in IE in a number of circumstances, such as when the HTML element had a bg image set, so appending beforehand seems best. Thanks to @dvelyk for the initial research on this one!
                        head.insertBefore(ss, lastLink.nextSibling);

                        if (ss.styleSheet) {
                            ss.styleSheet.cssText = css;
                        }
                        else {
                            ss.appendChild(doc.createTextNode(css));
                        }

                        //push to appendedEls to track for later removal
                        appendedEls.push(ss);
                    }
                }
            },
            //find media blocks in css text, convert to style blocks
            translate = function (styles, href, media) {
                var qs = styles.replace(respond.regex.keyframes, '').match(respond.regex.media),
                        ql = qs && qs.length || 0;

                //try to get CSS path
                href = href.substring(0, href.lastIndexOf("/"));

                var repUrls = function (css) {
                    return css.replace(respond.regex.urls, "$1" + href + "$2$3");
                },
                        useMedia = !ql && media;

                //if path exists, tack on trailing slash
                if (href.length) { href += "/"; }

                //if no internal queries exist, but media attr does, use that
                //note: this currently lacks support for situations where a media attr is specified on a link AND
                //its associated stylesheet has internal CSS media queries.
                //In those cases, the media attribute will currently be ignored.
                if (useMedia) {
                    ql = 1;
                }

                for (var i = 0; i < ql; i++) {
                    var fullq, thisq, eachq, eql;

                    //media attr
                    if (useMedia) {
                        fullq = media;
                        rules.push(repUrls(styles));
                    }
                        //parse for styles
                    else {
                        fullq = qs[i].match(respond.regex.findStyles) && RegExp.$1;
                        rules.push(RegExp.$2 && repUrls(RegExp.$2));
                    }

                    eachq = fullq.split(",");
                    eql = eachq.length;

                    for (var j = 0; j < eql; j++) {
                        thisq = eachq[j];
                        mediastyles.push({
                            media: thisq.split("(")[0].match(respond.regex.only) && RegExp.$2 || "all",
                            rules: rules.length - 1,
                            hasquery: thisq.indexOf("(") > -1,
                            minw: thisq.match(respond.regex.minw) && parseFloat(RegExp.$1) + (RegExp.$2 || ""),
                            maxw: thisq.match(respond.regex.maxw) && parseFloat(RegExp.$1) + (RegExp.$2 || "")
                        });
                    }
                }

                applyMedia();
            },

            //recurse through request queue, get css text
            makeRequests = function () {
                if (requestQueue.length) {
                    var thisRequest = requestQueue.shift();

                    ajax(thisRequest.href, function (styles) {
                        translate(styles, thisRequest.href, thisRequest.media);
                        parsedSheets[thisRequest.href] = true;

                        // by wrapping recursive function call in setTimeout
                        // we prevent "Stack overflow" error in IE7
                        w.setTimeout(function () { makeRequests(); }, 0);
                    });
                }
            },

            //loop stylesheets, send text content to translate
            ripCSS = function () {

                for (var i = 0; i < links.length; i++) {
                    var sheet = links[i],
                    href = sheet.href,
                    media = sheet.media,
                    isCSS = sheet.rel && sheet.rel.toLowerCase() === "stylesheet";

                    //only links plz and prevent re-parsing
                    if (!!href && isCSS && !parsedSheets[href]) {
                        // selectivizr exposes css through the rawCssText expando
                        if (sheet.styleSheet && sheet.styleSheet.rawCssText) {
                            translate(sheet.styleSheet.rawCssText, href, media);
                            parsedSheets[href] = true;
                        } else {
                            if ((!/^([a-zA-Z:]*\/\/)/.test(href) && !base) ||
                                    href.replace(RegExp.$1, "").split("/")[0] === w.location.host) {
                                // IE7 doesn't handle urls that start with '//' for ajax request
                                // manually add in the protocol
                                if (href.substring(0, 2) === "//") { href = w.location.protocol + href; }
                                requestQueue.push({
                                    href: href,
                                    media: media
                                });
                            }
                        }
                    }
                }
                makeRequests();
            };

    //translate CSS
    ripCSS();

    //expose update for re-running respond later on
    respond.update = ripCSS;

    //expose getEmValue
    respond.getEmValue = getEmValue;

    //adjust on resize
    function callMedia() {
        applyMedia(true);
    }

    if (w.addEventListener) {
        w.addEventListener("resize", callMedia, false);
    }
    else if (w.attachEvent) {
        w.attachEvent("onresize", callMedia);
    }
})(this);